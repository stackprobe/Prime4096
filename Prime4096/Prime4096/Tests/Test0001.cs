using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Charlotte.Tools;
using System.Numerics;

namespace Charlotte.Tests
{
	public class Test0001
	{
		public void Test01()
		{
			// if n < 3,317,044,064,679,887,385,961,981, it is enough to test a = 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, and 41. @ wiki

			for (int c = 0; c < 10000; c++)
			{
				string s = string.Format("331704406467988738596{0:D4}", c);

				Console.WriteLine(s + " ==> " + PrimeUtils.IsPrime_M(Common.ToBigInteger(s)));
			}
		}

		public void Test02()
		{
			// 3桁以下の素数の積
			BigInteger value = Common.ToBigInteger(
				"19590340644999083431262508198206381046123972390589368223882605328968666316379870661851951648789482321596" +
				"22955911543601914918952972521526672829228299085264902336273139240401793914201095826139363495947148375719" +
				"67216722434100671185162276611331351924888489899148921571883086798968751374395193389039680949055497503864" +
				"07106033836586660683539201011635917900039904495065203299749542985993134669814805318474080581207891125910"
				);

			FactorizationUtils.Factorization(value, @"C:\temp\1.txt");
		}

		public void Test03()
		{
			BigInteger value = Common.ToBigInteger(
				"106700590455862347842907841856033238416352421" // 10007 * 10009 * 10037 * 10039 * 10061 * 10067 * 10069 * 10079 * 10091 * 10093 * 10099
				);

			FactorizationUtils.Factorization(value, @"C:\temp\1.txt");
		}

		public void Test04()
		{
			BigInteger value = Common.ToBigInteger(
				"1" + StringTools.Repeat("0", 1000) // 10^1000
				);

			FactorizationUtils.Factorization(value, @"C:\temp\1.txt");
		}

		public void Test05()
		{
			// 101^500
			BigInteger value = Common.ToBigInteger(
				"1447727724325733152271256253294600740942981788615905052269513575527002219723300797972770764267254584" +
				"8490708306955524324299595489038289403613019595973141494500589437071311004740453459703662174003787693" +
				"5253497700084179245487784453640714512705837823256129202233763578668708300451633836700922490628871830" +
				"9707904903846773814065282484344116553834794980633580586408021725208330023487728650704910907775139713" +
				"8133202529587924196169336521440916993885625907478992073726476569982499490194508345149945071809563674" +
				"6048939638891836161280733034535257472429007602810036890539091109546112009475542706446667024137610244" +
				"0707329568405188081831982143888429642063668443527110728985660781219555203756933890002800429974557323" +
				"6641249071922621131785334032810067106859778696470318359021977211498724174997293149046209656897146479" +
				"6054142736623600421455619434646249862847808295550640672829618412851198589111892692272338654711206142" +
				"6404995302982880107320026649139654347663385044699777982410307808658390209791606245540331199822247550001"
				);

			FactorizationUtils.Factorization(value, @"C:\temp\1.txt");
		}
	}
}
